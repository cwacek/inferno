// Generated by CoffeeScript 1.6.2
(function() {
  var buckets, colors, dataHandler, getVal, gridSize, height, legendElementWidth, margin, plotter, times, width;

  margin = {
    top: 80,
    right: 0,
    bottom: 40,
    left: 160
  };

  width = $("#chart").width() - margin.left - margin.right;

  gridSize = Math.floor(width / 24);

  legendElementWidth = gridSize * 2;

  height = (gridSize * 7) + margin.top;

  buckets = 9;

  colors = ["#3fe500", "#63e100", "#86dd00", "#a7d900", "#c7d500", "#d2be00", "#ce9800", "#ca7500", "#c65200", "#c23100", "#bf1000"];

  times = ["12a", "1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a", "12p", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p"];

  dataHandler = function(d) {};

  getVal = function(d) {
    return d.value;
  };

  plotter = function(error, data) {
    var colorScale, convert, dayLabels, days, heatMap, isOld, legend, svg, timeLabels;

    isOld = function(date) {
      var diff;

      diff = (new Date() - date) / (1000 * 60 * 60 * 24);
      if (diff > 7) {
        return true;
      }
      return false;
    };
    convert = function(old) {
      var d, date, ret, val, _i, _len;

      ret = [];
      for (_i = 0, _len = old.length; _i < _len; _i++) {
        d = old[_i];
        date = new Date(d[0] * 1000);
        if (!isOld(date)) {
          val = {
            hour: date.getHours(),
            day: 7 - Math.round((new Date() - date) / (1000 * 60 * 60 * 24)),
            date: date.toLocaleDateString(),
            value: parseFloat(d[1])
          };
          ret.push(val);
        }
      }
      return ret;
    };
    data = convert(data);
    days = (function(data) {
      var dp, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        dp = data[_i];
        if (jQuery.inArray(dp.date, _results) === -1) {
          _results.push(dp.date);
        }
      }
      return _results;
    })(data);
    colorScale = d3.scale.quantile().domain([55, d3.max(data, getVal)]).range(colors);
    svg = d3.select("#chart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom + gridSize).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
    dayLabels = svg.selectAll(".dayLabel").data(days).enter().append('text').text(function(d) {
      return d;
    }).attr('x', 0).attr('y', function(d, i) {
      return (i - 1) * gridSize;
    }).style('text-anchor', 'end').attr('transform', "translate(-" + (1.5 * gridSize) + ", " + (gridSize / 1.5) + ")").attr('class', function(d, i) {
      return "dayLabel mono axis";
    });
    timeLabels = svg.selectAll(".timeLabel").data(times).enter().append("text").text(function(d) {
      return d;
    }).attr("x", function(d, i) {
      return (i - 1) * gridSize;
    }).attr("y", 0).style("text-anchor", "middle").attr("transform", "translate(" + (gridSize / 2) + ", -" + (1.5 * gridSize) + ")").attr("class", function(d, i) {
      if (i >= 7 && i <= 16) {
        return "timeLabel mono axis axis-worktime";
      } else {
        return "timeLabel mono axis";
      }
    });
    heatMap = svg.selectAll(".hour").data(data).enter().append("rect").attr("x", function(d) {
      return (d.hour - 1) * gridSize;
    }).attr("y", function(d) {
      return (d.day - 1) * gridSize;
    }).attr("rx", 4).attr("ry", 4).attr("class", "hour bordered").attr("width", gridSize).attr("height", gridSize).style("fill", colors[0]);
    heatMap.transition().duration(1000).style("fill", function(d) {
      return colorScale(d.value);
    });
    heatMap.append("title").text(function(d) {
      return d.value;
    });
    legend = svg.selectAll(".legend").data([0].concat(colorScale.quantiles()), function(d) {
      return d;
    }).enter().append("g").attr("class", "legend");
    legend.append("rect").attr("x", function(d, i) {
      return legendElementWidth * i;
    }).attr("y", 8 * gridSize).attr("width", legendElementWidth).attr("height", gridSize / 1.5).style("fill", function(d, i) {
      return colors[i];
    });
    return legend.append("text").attr("class", "mono").text(function(d) {
      return "> " + (Math.round(d));
    }).attr("x", function(d, i) {
      return (legendElementWidth * i) + 5;
    }).attr("y", (8 * gridSize) + (gridSize / 2));
  };

  d3.json("temps.dat", plotter);

}).call(this);
